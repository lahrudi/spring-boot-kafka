package com.sdase.malware.scanner.streaming.services;

import com.sdase.malware.common.StringUtils;
import com.sdase.malware.common.TikaAnalysis;
import com.sdase.malware.scanner.streaming.model.CheckEvent;
import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import com.sdase.malware.services.BlackListService;
import lombok.extern.slf4j.Slf4j;
import org.apache.tika.exception.TikaException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Component;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.InputStream;
import com.sdase.malware.services.BlackListService;
import java.net.URL;
import java.util.List;
import java.util.Set;

@Slf4j
@Component
public class kafkaConsumer {

    final BlackListService blackListService;

    public kafkaConsumer(BlackListService blackListService) {
        this.blackListService = blackListService;
    }

    /**
     * Producing CheckResultEvent when the Check Event is successfully received
     * @param checkEvent
     * @return
     * @throws Exception
     */
    @KafkaListener(topics = "${checkEvent.topic.name}", containerFactory = "checkEventKafkaListenerContainerFactory")
    @SendTo(value = {"${checkEventResult.topic.name}"})
    CheckResultEvent listenAndReply(CheckEvent checkEvent) throws Exception {
        log.info("ListenAndReply [{}]", checkEvent);

        InputStream input = new URL(checkEvent.getUrl()).openStream();
        String content = TikaAnalysis.extractContentUsingParser(input);

        String iban = StringUtils.captureValues(content);

        CheckResultEvent checkResultEvent = new CheckResultEvent();

        if ( !iban.isEmpty())
            if ( blackListService.getBlackListByIBAN(iban) != null )
            {
                checkResultEvent.setDetails( "This account with this IBAN " + iban  + " is blocked" );
                checkResultEvent.setName(iban + "_blocked");
                checkResultEvent.setState(CheckResultEvent.StateEnum.SUSPICIOUS);
            } else {
                checkResultEvent.setDetails( "This account with this IBAN " + iban  + " is not blocked" );
                checkResultEvent.setName(iban + "_notBlocked");
                checkResultEvent.setState(CheckResultEvent.StateEnum.OK);
                checkResultEvent.setName("check event");
            }
        else {
            checkResultEvent.setDetails( "IBAN was not found in the system" );
            checkResultEvent.setName("NotExist");
            checkResultEvent.setState(CheckResultEvent.StateEnum.ERROR);
            checkResultEvent.setName("check event");
        }

        return checkResultEvent;
    }
}
