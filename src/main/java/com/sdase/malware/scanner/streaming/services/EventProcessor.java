package com.sdase.malware.scanner.streaming.services;

import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Arrays;

@Component
public class EventProcessor {

    private static final Serde<String> STRING_SERDE = Serdes.String();

    @Value(value = "${checkEvent.topic.name}")
    private String eventTopic;

    @Value(value = "${checkEventResult.topic.name}")
    private String eventResultTopic;

    @Autowired
    public void buildPipeline(StreamsBuilder streamsBuilder) {
        KStream<String, String> messageStream = streamsBuilder
                .stream(eventTopic, Consumed.with(STRING_SERDE, STRING_SERDE));

        CheckResultEvent resultEvent = new CheckResultEvent();
        resultEvent.setState(CheckResultEvent.StateEnum.OK);
        resultEvent.setName("Test");
        resultEvent.setDetails("Test");

        getStream(messageStream, STRING_SERDE, eventResultTopic);
    }

    static void getStream(KStream<String, String> messageStream, Serde<String> stringSerde, String outputTopicName) {
        KTable<String, Long> wordCounts = messageStream
                .mapValues((ValueMapper<String, String>) String::toLowerCase)
                .flatMapValues(value -> Arrays.asList(value.split("\\W+")))
                .groupBy((key, word) -> word, Grouped.with(stringSerde, stringSerde))
                .count(Materialized.as("events"));

        wordCounts.toStream().to(outputTopicName);
    }
}
